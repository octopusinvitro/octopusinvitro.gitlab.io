---
layout: post
title: "My first Jekyll site"
date: 2012-08-27 13:53:20.000000000 +01:00
type: post
published: true
status: publish
categories:
- Web development
tags:
- Jekyll
author:
  display_name: Octopus in vitro
  first_name: ''
  last_name: ''
---
<p><strong>Update (2014-08-05):</strong> There is a new post on Smashing Magazine about <a href="http://www.smashingmagazine.com/2014/08/01/build-blog-jekyll-github-pages/">how to create a blog with Jekyll</a> that is very handy if you never made a site with Jekyll before.</p>
<hr />
<p>My first Jekyll site is very simple. Is the dedicated website of my project <a href="https://ppsnippets.tk">Particle physics snippets</a>, where I'll be uploading code snippets that I used from time to time when I was working in research.</p>
<p>The purpose of the site is to explain what the code is about. I also want to explain the physics behind the instructions, for which a README file is just not enough. I love images and structured text, and I also think it is more didactic and educational to present the information that way.</p>
<p>Check out the <a href="/work/web-dev/jekyll-site-ppsnippets/">portfolio post</a>.</p>
<h2>The <code>_includes</code> folder</h2>
<p>For this site I stored the contents of the <code>head</code> tag in a file inside the <code>_includes</code> folder. You can see that I used <a href="https://html5boilerplate.com/">html5 boilerplate</a> as a start, and removed anything I didn't need.</p>
<pre><code class="language-markup">
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;

  &lt;title&gt;{% if page.title %}{{ page.title }}{% else %}{{ site.title }}{% endif %}&lt;/title&gt;

  &lt;meta name="description" content="{% if page.description %}{{ page.description }}{% else %}{{ site.description }}{% endif %}"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

  &lt;link rel="shortcut icon" href="favicon.ico" type="image/x-icon"&gt;
  &lt;link rel="apple-touch-icon-precomposed" href="apple-touch-icon-precomposed.png"&gt;

  &lt;link href="http://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic" rel="stylesheet" type="text/css"&gt;
  &lt;link href="http://fonts.googleapis.com/css?family=Bree+Serif" rel="stylesheet" type="text/css"&gt;
  &lt;link rel="stylesheet" href="{{ '/css/main.css' | prepend: site.baseurl }}"&gt;
  &lt;script async src="{{ '/js/vendor/pf107-r-m262.min.js' | prepend: site.baseurl }}"&gt;&lt;&lt;script&gt;

  &lt;link rel="canonical" href="{{ page.url | replace:'index.html','' | prepend: site.baseurl | prepend: site.url }}"&gt;
&lt;/head&gt;</code></pre>
<p>Then, I placed the navigation in a different file, which is very similar to the default site generated by Jekyll when you first run <code class="language-bash">jekyll new &lt;sitename&gt;</code>. The menu is responsive with only CSS. All the icons are in SVG format. I am trying to find some basic structure that I could use in future Jekyll projects as well.</p>
<pre><code class="language-markup">
&lt;!--[if lt IE 7]&gt;
  &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
&lt;![endif]--&gt;

&lt;nav role="navigation" class="zigzag"&gt;
  &lt;a href="#" class="menu-icon"&gt;
    &lt;img src="{{ site.baseurl }}/img/hamburger.svg" width="18" height="15" alt="Hamburger icon"&gt;
  &lt;/a&gt;

  &lt;ul class="navigation"&gt;
    &lt;li&gt;&lt;a href="{{ site.baseurl }}/"&gt;Home&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;/li&gt;
{% for page in site.pages %}{% if page.menuname %}
    &lt;li&gt;&lt;a href="{{ page.url | prepend: site.baseurl }}"&gt;{{ page.menuname }}&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;/li&gt;
{% endif %}{% endfor %}
  &lt;/ul&gt;
&lt;/nav&gt;</code></pre>
<p>Another file in this folder is the footer, where I load the <a href="http://prismjs.com/">prismjs</a> and <a href="https://www.mathjax.org/">MathJax</a> JavaScript files, but only if they are used in the page. MathJax is used to show math equations and prismjs is Lea Verou's syntax highlighter.</p>
<pre><code class="language-markup">
&lt;div class="wrapper"&gt;
  &lt;p class="footnote"&gt;&lt;a href="ppsnippets.tk"&gt;Particle Physics Snippets&lt;/a&gt; site is coded and maintained by M. E. Stevens. &lt;br /&gt;
  You can also find the code on &lt;a href="https://bitbucket.org/octopusinvitro/particle-physics-snippets"&gt;BitBucket&lt;/a&gt; and &lt;a href="https://gitlab.com/octopusinvitro/particle-physics-snippets"&gt;GitLab&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
{% if page.prism %}
&lt;script src="{{ site.baseurl }}/js/vendor/prism.js"&gt;&lt;/script&gt;{% endif %}{% if page.mathjax %}
&lt;script async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt;{% endif %}
{% include stats.html %}</code></pre>
<p>To check this I make use of the <a href="http://yaml.org/">YAML</a> Front Matter variables in the top of each page. If the page has code in it that must be highlighted, I add <code class="language-yml">prism: true</code> in the Front Matter. Same if the page uses MathJax. For example, the page about dosimetry includes both:</p>
<pre><code class="language-css">
---
layout: default
title: Stopping Power Simulation
menuname: Dosimetry
description: Explanation of the physics behind this macro that calculates the stopping power of a particle entering a material.
permalink: /dosimetry/
prism: true
mathjax: true
---</code></pre>
<h2>Layouts folder</h2>
<p>I kept it simple and used only one layout, <code>default.html</code>:</p>
<pre><code class="language-markup">
&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7]&gt;	   &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;		   &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;		   &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class="no-js"&gt; &lt;!--&lt;![endif]--&gt;

{% include head.html %}

  &lt;body&gt;

{% include header.html %}

{{ content }}

{% include footer.html %}

  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<h2>Configuration</h2>
<p>It's very basic as well. In the <code>_config.yml</code> file, I use the <code>exclude</code> command to prevent certain files from appearing on the final generated site. I also define custom variables to store repeated stuff like social media urls. Their values can then be retrieved by using the <a href="http://liquidmarkup.org/">liquid syntax</a> <code class="language-liquid">{% site.varname %}</code></p>
<p>In the Front Matter of my pages, I use <code>permalink: /name/</code> in order to strip the <code>.html</code> extension from the URL. This generates a folder called <code>name</code> with the HTML file inside it. It's one of those Jekyll things that is not very elegant, but you have to live with it. This can be avoided if, instead of hosting the site on GitHub, you hosted it in a server that allowed you to use an <code>.htaccess</code> file with the relevant configurations.</p>
<p>For some Greek letters, I used <a href="http://dev.w3.org/html5/html-author/charref">HTML entities</a>, for the equations I used <a href="http://www.w3.org/Math/">MathML</a>. Internet Explorer and Google Chrome can't read it, which is the reason why I have to make an extra http request to load the MathJax javascript library. Sorry, mobile phone users :-(</p>
<p>I really see no point in writing vendor prefixes or keeping up to date with them, so I just dropped Lea Verou's fantastic <a href="http://leaverou.github.io/prefixfree/">prefix-free</a> JavaScript library in. She is also the author of prismjs. However, this two files can not be concatenated if you want to use async loading, since prismjs won't work in async mode and needs to be loaded alone at the end of the page.</p>
<p>Apart from that, I went through my typical testing work-flow: syntax, performance, image optimization, responsiveness, SEO, usability, analytics/stats, etc.</p>
<h2>To do</h2>
<p>If I ever stop being a busy bee in the future, I'd like to try some things:</p>
<ul>
<li>Load MathJax only if the browser does not support MathML (and hope the browser doesn't lie).</li>
<li>If you use only MathML, the size of the numerator and denominator in fractions can be increased with CSS. But the moment you throw MathJax in, you have no more control over that. They look very small with MathJax, so I'll have to find the time to search some solution to this.</li>
<li>Check that the site is truly accessible.</li>
</ul>
<p>Or you can give it a try. You can find the code at <a href="https://github.com/octopusinvitro/particle-physics-snippets/tree/gh-pages">GitHub</a>.</p>
