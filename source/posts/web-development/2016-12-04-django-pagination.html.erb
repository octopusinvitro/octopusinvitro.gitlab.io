---
layout: post
title: Django pagination
date: 2016-12-04 02:17:29.000000000 +01:00
type: post
published: true
status: publish
categories:
- Web development
tags:
- Python
- Django
author:
  display_name: Octopus in vitro
  first_name: ''
  last_name: ''
---

<p>You may know that <a href="https://docs.djangoproject.com/en/1.10/topics/pagination/">Django comes with a paginator out of the box</a>. It's very fancy and it has a lot of cool methods.</p>

<p>I have seen that people use the paginator in the view as indicated in the docs, i.e. importing <code class="language-">PageNotAnInteger</code> and <code class="language-">EmptyPage</code>. They always go in the <code class="language-">try</code> block, and when you are done you return the pages to the template.</p>

<p>From the docs example:</p>

<pre><code class="language-python">
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import render


def listing(request):
    contact_list = Contacts.objects.all()
    paginator = Paginator(contact_list, 25) # Show 25 contacts per page

    page = request.GET.get('page')
    try:
        contacts = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        contacts = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        contacts = paginator.page(paginator.num_pages)

    return render(request, 'list.html', {'contacts': contacts})
</code></pre>

<p>This is a lot of logic to go in a view, so I was wondering if I could separate it into service objects so I can unit test it more easily. <a href="https://8thlight.com/blog/christoph-gockel/2016/11/02/getting-rails-on-track-part-3-controllers.html">Just like people do in Rails</a>.</p>

<p>So I created a small Django app to play with the Paginator. It's called <a href="https://github.com/octopusinvitro/team-directory">Team Directory</a>, and is basically a paginated list of people.</p>

<p>My thought process behind this was that if this code was in the view, then in tests I would have to read <code class="language-python">objects.all()</code> from the database. But because the queryset behaves like an array, you can put this code in a separate class and unit test it separately with an array and <code class="language-">SimpleTestCase</code>, which doesn't hit the database. Then in the integration tests you can test the wiring of it all and hit the database.</p>

<p>I thought of using a class-based approach and inherit from <code class="language-">ListView</code>, to play with it as well (the app is very simple, I don't need it really) but I found that if I did it this way, the tests hit the database as well. So I will investigate that in another occasion.</p>

<p>The paginator gives you a page object. In the template, since you first loop into the items for that page, it can be confusing to call it <code class="language-python">contacts</code>. Or at least it is confusing to me! So I called it <code class="language-python">current_page</code>.</p>

<p>Then I added the pagination links. Here in particular is when it makes sense to have called it <code class="language-python">current_page</code>, because of the methods <code class="language-python">has_next_page()</code> etc. Imagine the sound of <code class="language-python">contacts.has_next_page()</code>... nope.</p>

<p>I used other two projects for this:</p>

<ul>
  <li>In order to fill the database I found this awesome open-source project called <a href="http://www.generatedata.com">http://www.generatedata.com</a>, that allows you to generate stupid data to fill a database. It's ideal for pojects like this!</li>
  <li>Another project that I like is <a href="https://placekitten.com/">https://placekitten.com/</a>, which does the same with images, providing a placeholder kitten for your prototypes.</li>
</ul>

<p style="width: 300px; margin:auto;"><img src="https://placekitten.com/g/300/300" width="300" height="300" alt="a kitten!"></p>

<p>As a final thing to practice, I may check how to put this in Heroku, since <a href="https://devcenter.heroku.com/articles/deploying-python">they recently added support for Django apps</a>. I'll come back and update this if I find the time to play with Heroku.</p>
