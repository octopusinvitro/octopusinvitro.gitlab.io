---
layout: post
title: Wordle clone
date: 2022-03-15 17:42:45.000000000 +01:00
type: post
published: true
status: publish
categories:
- Code &amp; computers
tags:
- JavaScript
author:
  display_name: Octopus in vitro
  first_name: ''
  last_name: ''
---

<p>I guess we are all sad from the news that the NYT has bought Wordle...</p>

<p>Since then a lot of people have created clones of it, some of them with some twist: like <a href="https://www.heardle.app/">heardle</a>, in which you have to guess the song that is playing, or <a href="https://colordle.com/">colordle</a>, where you have to guess the HEX representation of a color. There is even a <a href="https://mywordle.strivemath.com/">custom wordle</a> that allows you to choose your own word to send to your friends. And you also have <a href="https://qntm.org/files/absurdle/absurdle.html">Absurdle</a>, <a href="https://zaratustra.itch.io/dordle">Dordle</a>, <a href="https://www.quordle.com/">Quordle</a>, <a href="https://octordle.com/">Octordle</a>, <a href="https://www.sedecordle.com/">Sedecordle</a>, <a href="https://www.lewdlegame.com/">Lewdle</a>, <a href="https://converged.yt/primel/">Primel</a>, <a href="https://sweardle.com/">Sweardle</a>, <a href="https://queerdle.com/">Queerdle</a>, <a href="https://www.starwordle.com/">Star Wordle</a>, <a href="https://worldle.teuteuf.fr/">Worldle</a>, <a href="https://globle-game.com/">Globe</a>...</p>

<p>I wonder how many of these will still stand 20 years from now ðŸ˜„.</p>

<p>A lot has been said about its success being due to it being a <strong>plain web app</strong>, with no trackers, no adds, no popups, no bullshit. Just like the web should be. That resonates with me, so I thought I'll give it a try and implement my own wordle, just for fun.</p>

<p><a href="<%= image_host %>/images/uploads/2022/03/projects-wordle-clone-featured.png"><img class="aligncenter" src="<%= image_host %>/images/uploads/2022/03/projects-wordle-clone-featured.png" alt="Screenshot of the Wordle clone" width="200" height="173" /></a></p>

<p><a href="/work/projects/wordle-clone">You can check out the details of this project in the dedicated portfolio page</a>.</p>

<h2>Set up</h2>

<p>For the frontend, I used my <a href="https://github.com/octopusinvitro/html5-scafold">HTML scafold</a> repository as a starting point. I keep updating it and changing things here and there, but basically it sets up a <strong>vanilla JavaScript webapp</strong> using <strong>Jasmine standalone</strong> as the testing framework, and <strong>gulp</strong> as a task runner. It also uses <strong>sass</strong> for the styles.</p>

<p>It has tasks for concatenating, minimizing and watching files, as well as creating useful sourcemaps. For the CSS it also runs <code class="language-plaintext">autoprefixer</code> to add only the vendor prefixes that are needed.</p>

<p>Finally, there is a task that runs a browser sync server, to serve the page that runs the tests.</p>

<p>I am really happy that I manage to keep the JavaScript below 10kB, and the CSS too. In total, 11 requests, 112.53 kB transferred, and takes 1.65s to load. This can be improved, but is not bad for a webapp.</p>

<h2>Deploy</h2>

<p>Since this is mostly a JavaScript app, I thought I could use <strong>GitHub pages</strong> to serve it. GitHub will automatically serve anything you put in an orphan <code class="language-plaintext">gh-pages</code> branch.</p>

<p>This is ideal for a project where you have dev code that you want to track with version control but <strong>is not</strong> your site, and code generated by your dev code that you want to track and <strong>is</strong> your site. You can keep track of changes to both by keeping the dev code in the <code class="language-plaintext">main</code> branch and the generated code in the <code class="language-plaintext">gh-pages</code> branch.</p>

<p>How to do this? I tell <code class="language-plaintext">gulp</code> to generate the final site in a folder called <code class="language-plaintext">site</code>. Before I build the site I go inside of this folder and clone the main branch there, then I create the orphan branch:</p>

<pre><code class="language-bash">
cd site
git clone git@github.com:octopusinvitro/wordle-js.git .
git checkout --orphan gh-pages
</code></pre>

<p>The files from the main branch will be there so they need to be removed. That's dev code. This folder is for site code.</p>

<p>Then we get out of the folder and build the site normally. This will generate the site files inside of the <code class="language-plaintext">site</code> folder. We can enter the folder again, commit all the site files and push.</p>

<p>The <code class="language-plaintext">site</code> folder will always be stuck in the <code class="language-plaintext">gh-pages</code> branch, forever. Every time a file changes, the site is regenerated, and we enter the <code class="language-plaintext">site</code> folder to commit and push to <code class="language-plaintext">gh-pages</code>. GitHub will then serve the updated site.</p>

<p>Meanwhile, the root directory of the app is never in the <code class="language-plaintext">gh-pages</code> branch, so that you can track changes to the dev code that generates the site. You will commit and push to the <code class="language-plaintext">main</code> branch from here, or to other branches.</p>

<p>This is all explained <a href="https://github.com/octopusinvitro/wordle-js#one-off-setup">in the README</a>.</p>

<h2>The game</h2>

<p>The first thing I wanted to solve was to find <strong>an API</strong> that would allow me to ask for a 5 letter word everyday. I spent some time on this and couldn't find a good solution. So I decided to leave this for later and start building something with a hardcoded set of words.</p>

<p>I first focused on the basic functionality of the game. I ended up with these classes:</p>

<ul>
  <li>
    <p><code class="language-plaintext">Board</code>: The class to represent the board and operations in the board like getting the word from a row, checking if a row is full, or is the current row, etc.</p>
  </li>

  <li>
    <p><code class="language-plaintext">Game</code>: Checks for win or game-over, receives a word and checks which letters are present, absent or correct, etc.</p>
  </li>

  <li>
    <p><code class="language-plaintext">GameUI</code>: Deals with DOM operations on the elements that are the visual representation of the board and the keyboard, sets event listeners, etc.</p>
  </li>
</ul>

<p>I also created a <code class="language-plaintext">Selectors</code> class, I often do this to keep my selectors organized and so that I can use them both in tests and the code.</p>

<p>For the words, since I am still searching for a good API, I just hardcoded a bunch of words into a <code class="language-plaintext">words.js</code> file, and the game selects one randomly on every refresh.</p>

<p>I didn't add any logic yet to constrain the game to one word a day, so if you want to play again, you just have to <strong>refresh the page</strong>.</p>

<p>The tests all use a board with just two rows, as that is enough to test the logic.</p>

<p>Working with the board I learnt that I can use <code class="language-javascript">slice()</code> to get the last element of an array:</p>

<pre><code class="language-javascript">
array.slice(-1);
</code></pre>

<p>And <code class="language-javascript">string | 0</code> to easily convert something to an integer. I like to keep learning these little things after so many years coding in JavaScript!</p>

<h2>The UI</h2>

<p>The wordle page not only has the game, it also has a help section, stats, and settings. At the moment  of writing this, I finished the help and stats section, but not the settings.</p>

<p>I ended up with this classes:</p>

<ul>
  <li>
    <p><code class="language-plaintext">Modal</code>: Deals with DOM operations related with the upper menu buttons, which change the visibility and position of specific sections in the page.</p>
  </li>

  <li>
    <p><code class="language-plaintext">ModalStats</code>: Extends the modal class for the needs of the modal that shows the stats, since that one is a bit different. It uses the <code class="language-plaintext">clipboard</code> API to copy the shareable board to the user's clipboard.</p>
  </li>

  <li>
    <p><code class="language-plaintext">State</code>: JavaScript doesn't have enums, which would be amazing for representing the state of a tile, so I tried to implement an enum here. I didn't want to have lots of conditional code like <code class="language-javascript">if (state === 'correct') { return 'ðŸŸ©'}</code>, so I put that knowledge in this class.</p>
  </li>

  <li>
    <p><code class="language-plaintext">Stats</code>: Calculates the stats that you see when you click the stats button. It uses the <code class="language-plaintext">localStorage</code> API to read and store the stats in the browser. It defines a default stats structure, for the first time the game is played, then it reads from <code class="language-plaintext">localStorage</code> and does a naive validation of the fields.</p>
  </li>
</ul>

<p>I haven't worked much with the <code class="language-plaintext">localStorage</code> or <code class="language-plaintext">clipboard</code> APIs before, so it was nice to have an app where I can play with them. They seem pretty straight-forward to use, and since I am running the Jasmine standalone library, the tests related with <code class="language-plaintext">localStorage</code> can be easily run directly against the browser, which is great.</p>

<p>The <code class="language-plaintext">clipboard</code> API has been changing though, so some browsers may not support the new method signatures yet.</p>

<p>Old clipboard syntax:</p>

<pre><code class="language-javascript">
document.execCommand('copy');
document.execCommand('paste');
</code></pre>

<p>New clipboard syntax:</p>

<pre><code class="language-javascript">
navigator.clipboard.writeText();
navigator.clipboard.readText();
</code></pre>

<p>In order to copy things to the clipboard, you also need a <code class="language-plaintext">manifest</code> file in your root directory with the relevant permissions:</p>

<pre><code class="language-json">
{
  &quot;permissions&quot;: [
    &quot;clipboardRead&quot;,
    &quot;clipboardWrite&quot;
  ]
}
</code></pre>

<p><a href="(https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard)">MDN has an article that explains it in detail</a>. I decided to use the new syntax as the old one may be deprecated soon.</p>

<p>Since the <code class="language-plaintext">Game</code> is the one that holds the knowledge of which tiles in the board where correct, absent or present, it made sense that the method to generate the shareable board lived there.</p>

<p>For my attempt at creating an enum, I have the <code class="language-plaintext">State</code> class define three constants that store instances of <code class="language-plaintext">State</code>, so I can define methods on them:</p>

<pre><code class="language-javascript">
static CORRECT = new State('correct');
</code></pre>

<p>That way I can pretend I have an enum like <code class="language-javascript">State.CORRECT</code>, but can also call <code class="language-javascript">State.CORRECT.tile</code> or <code class="language-javascript">State.CORRECT.name</code>, which is neat.</p>

<p>The first time you play, or if the user has deleted the local storage, there are no stats to read, so the default structure is returned. In the <code class="language-plaintext">Stats</code> class, I would have used <code class="language-javascript">JSON</code> transformations to get a deep independent copy (including child objects):

<pre><code class="language-javaScript">
let deepIndependentCopy = JSON.parse(JSON.stringify(original));
</code></pre>

However I decided to use the <strong>spread operator</strong>, for a cleaner (and maybe more performant) solution:</p>

<pre><code class="language-javaScript">
let stats = JSON.parse(localStorage.getItem(Stats.KEY));

if (!stats) {
  stats = { ...Stats.DEFAULT };
  stats.guesses = { ...Stats.DEFAULT.guesses };
}
</code></pre>

<p>This creates an independent copy of the default structure and the <code class="language-plaintext">guesses</code> object inside that structure before returning it, so that we don't accidentally modify the default structure. Another clean option would be <code class="language-javascript">Object.assign(copy, original);</code>, but the child objects also need to be copied separately. If I had a more complicated structure I would use <code class="language-javascript">JSON</code>.</p>

<p>In the <code class="language-plaintext">ModalStats</code> class there is a share button that when clicked, generates a shareable version of the board. But because clicking on the modal closes the modal, we need to handle the button click like this:</p>

<pre><code class="language-javascript">
this.shareButton.addEventListener('click', (event) =&gt; {
  event.preventDefault();
  event.stopPropagation();
  this.copyToClipboard();
});
</code></pre>

<p>This avoids closing the modal when clicking the share button.</p>
